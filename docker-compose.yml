version: '2.1'
services:

  history:
    image: dojot/history:development
    restart: always
    depends_on:
      - mongodb
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'history'
    logging:
      driver: json-file
      options:
        max-size: 100m

  persister:
    image: dojot/persister:development
    restart: always
    depends_on:
      - mongodb
      - auth
      - kafka
      - data-broker
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'persister'
      KAFKA_GROUP_ID: 'persister-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongodb:
    image: dojot/mongo:3.2
    restart: always
    user: "mongodb"
    logging:
      driver: json-file
      options:
        max-size: 100m

  # mosca-redis:
  #   image: dojot/redis:5.0.5-alpine3.10
  #   restart: always
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  # iotagent-mqtt:
  #   image: dojot/iotagent-mosca:development
  #   depends_on:
  #     - mosca-redis
  #     - kafka
  #     - data-broker
  #     - auth
  #     - ejbca
  #   ports:
  #     - 1883:1883
  #     - 8883:8883
  #   restart: always
  #   environment:
  #     DOJOT_MANAGEMENT_USER: 'iotagent-mqtt'
  #     KAFKA_GROUP_ID: 'iotagent-mqtt-group'
  #     ALLOW_UNSECURED_MODE: 'true'
  #     LOG_LEVEL: 'info'
  #     MOSCA_TLS_DNS_LIST: 'localhost'
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  gui:
    image: dojot/gui:development
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker:
    image: dojot/data-broker:development
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
      - auth
    environment:
      DOJOT_MANAGEMENT_USER: 'data-broker'
      KAFKA_GROUP_ID: 'data-broker-group'
      SERVICE_PORT: ${DATA_BROKER_SERVICE_PORT}
      DATA_BROKER_URL: 'http://data-broker:${DATA_BROKER_SERVICE_PORT}'
      LOG_LEVEL: 'info'
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

################
# iot-agent lwm2m
################
  # iotagent-lwm2m:
  #   image: dojot/iotagent-leshan:development
  #   depends_on:
  #     - kafka
  #     - data-broker
  #     - auth
  #     - image-manager
  #   environment:
  #     DOJOT_MANAGEMENT_USER: 'iotagent-lwm2m'
  #     KAFKA_GROUP_ID: "iotagent-lwm2m-group"
  #     # The FILE_SERVER_ADDRESS should be filled with an address accesible to the devices that want to update the firmware
  #     FILE_SERVER_ADDRESS: 127.0.0.1
  #   ports:
  #     - 5683:5683/udp # configuration coap port
  #     - 5684:5684/udp # configuration dtls port
  #     - 5693:5693/udp # file server coap port
  #     - 5694:5694/udp # file server dtls port
  #   restart: always
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  # image-manager:
  #   image: dojot/image-manager:development
  #   restart: always
  #   depends_on:
  #     - postgres
  #     - minio
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m
  #   environment:
  #     # TODO: The following should be unique for each environment
  #     S3ACCESSKEY: 9HEODSF6WQN5EZ39DM7Z
  #     S3SECRETKEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
  #     DBHOST: postgres
  #     DBUSER: imgm
  #     DBPASS: imgm

  # minio:
  #   image: dojot/minio:2019.09.20
  #   restart: always
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m
  #   environment:
  #     # TODO: The following should be unique for each environment
  #     MINIO_ACCESS_KEY: 9HEODSF6WQN5EZ39DM7Z
  #     MINIO_SECRET_KEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
  #   command: server /data

  device-manager:
    image: dojot/device-manager:development
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      DEV_MNGR_CRYPTO_PASS: kamehameHA
      DEV_MNGR_CRYPTO_IV: 1234567890123456
      DEV_MNGR_CRYPTO_SALT: shuriken
      DBHOST: postgres
      DBUSER: devm
      DBPASS: devm
      LOG_LEVEL: INFO
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres:
    image: dojot/postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  # Prepare database, Bootstrap the database
  kong-migrations:
    image: mprevide/kong:test
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 100m

  # Run any new migrations and Finish running any pending migrations after 'up'.
  kong-migrations-up:
    image:  mprevide/kong:test
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 100m

  apigw:
    image: mprevide/kong:test
    user: "kong"
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: debug
      # Private key, must be used to generate all certificates defined in KONG_SSL_CERT.
      KONG_SSL_CERT_KEY: /certs/example.key
      # To enable HTTPs, it is necessary to configure public certificates
      # issued by a public CA, such as lets encrypt, for external communication
      # and a public certificate issued by dojot's EJBCA for internal communication
      # (all these certificates must be concatenated as in the
      # kong/certificates/example.crt) and defined in KONG_SSL_CERT.
      # All of these certificates must have the Subject Alternative Name
      # with at least one DNS setting with an external domain.
      #
      # It is also possible to configure KONG_SSL_CERT_KEY and KONG_SSL_CERT through the kong Admin-API,
      # in the endpoint certificates in this case is important to configure the SNI.
      KONG_SSL_CERT: /certs/example.crt
    ports:
      - "8000:8000/tcp"
      # Proxy listen to HTTPS traffic (8443). services and routes must be configured to use the https protocol
      - "8443:8443/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    volumes:
      # Exposes certificates
      - ./kong/certificates/:/certs/:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-config:
    image: dojot/appropriate-curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z

  auth:
    image: dojot/auth:development
    restart: always
    depends_on:
      - apigw
      - postgres
      - auth-redis
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "auth"
      AUTH_DB_PWD:  "auth"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used.
      # Allowed values are "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"
      DOJOT_MANAGEMENT_USER: 'auth'
      KAFKA_GROUP_ID: 'auth-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  # flowbroker-redis:
  #   image: dojot/redis:5.0.5-alpine3.10
  #   restart: always
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  # flowbroker:
  #   image: dojot/flowbroker:development
  #   restart: always
  #   environment:
  #     DEPLOY_ENGINE: "docker"
  #     FLOWBROKER_NETWORK: ${FLOWBROKER_NETWORK}
  #     DOJOT_MANAGEMENT_USER: 'flowbroker'
  #     KAFKA_GROUP_ID: 'flowbroker-group'
  #   depends_on:
  #     - rabbitmq
  #     - kafka
  #     - mongodb
  #     - auth
  #     - flowbroker-context-manager
  #     - flowbroker-redis
  #   networks:
  #     - default
  #     - flowbroker
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:Z

  # flowbroker-context-manager:
  #   image: dojot/flowbroker-context-manager:development
  #   restart: always
  #   environment:
  #     ZOOKEEPER_HOST: zookeeper
  #     ZOOKEEPER_PORT: 2181
  #     ZEROMQ_PORT: 5556
  #     HOLD_LOCK_TIMEOUT: 10000
  #     WAIT_LOCK_TIMEOUT: 30000
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - default
  #     - flowbroker

  # rabbitmq:
  #   image: dojot/rabbitmq:3.7-alpine
  #   restart: always
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  zookeeper:
    image: dojot/zookeeper:3.4
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: dojot/wurstmeister-kafka:2.12-2.1.1
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_NUM_PARTITIONS: 10
      JMX_PORT: 1099
    logging:
      driver: json-file
      options:
        max-size: 100m

  ejbca:
    image: dojot/ejbca-rest:development
    environment:
      DOJOT_MANAGEMENT_USER: 'ejbca'
      KAFKA_GROUP_ID: 'ejbca-group'
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  # data-manager:
  #   image: dojot/data-manager:development
  #   restart: always
  #   depends_on:
  #     - flowbroker
  #     - device-manager

  backstage:
    image: dojot/backstage:development
    restart: always
    depends_on:
      - postgres

  # cron:
  #   image: dojot/cron:development
  #   depends_on:
  #     - kafka
  #     - data-broker
  #     - auth
  #     - mongodb
  #   restart: always

  ws:
    image: mprevide/ws:test
    restart: always
    ports:
      - 4545:4545
      - 4546:4546


# GUI to Kong Admin API - BEGIN
#
# Konga GUI will be available at http://localhost:1337
  konga:
    image: dojot/pantsel_konga:0.14.7
    depends_on:
      - apigw
      - mongodb
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongodb
      KONGA_LOG_LEVEL: info
      NO_AUTH: "true"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga.js
      BASE_URL: env2.dojot.com.br
      NODE_ENV: production
    volumes:
      - ./kong/konga.config.js:/konga.js:ro
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 100m
#
# GUI to Kong Admin API - END

networks:
  flowbroker:
    name: ${FLOWBROKER_NETWORK}

version: '2.1'
services:

  history:
    image: dojot/history:v0.4.2
    restart: always
    depends_on:
      - mongodb
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'history'
    logging:
      driver: json-file
      options:
        max-size: 100m

  persister:
    image: dojot/persister:v0.4.2
    restart: always
    depends_on:
      - mongodb
      - auth
      - kafka
      - data-broker
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'persister'
      KAFKA_GROUP_ID: 'persister-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongodb:
    image: dojot/mongo:3.2
    restart: always
    user: "mongodb"
    logging:
      driver: json-file
      options:
        max-size: 100m

  mosca-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  iotagent-mqtt:
    image: dojot/iotagent-mosca:v0.4.2
    depends_on:
      - mosca-redis
      - kafka
      - data-broker
      - auth
      - ejbca
    ports:
      - 1883:1883
      - 8883:8883
    restart: always
    environment:
      DOJOT_MANAGEMENT_USER: 'iotagent-mqtt'
      KAFKA_GROUP_ID: 'iotagent-mqtt-group'
      ALLOW_UNSECURED_MODE: 'false'
      MOSCA_TLS_DNS_LIST: 'localhost'
    logging:
      driver: json-file
      options:
        max-size: 100m

  gui:
    image: mprevide/gui:test_fix  #dojot/gui:report_axis_y
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      GUI_VERSION: 'compose123'

  data-broker:
    image: dojot/data-broker:v0.4.2
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
    environment:
      DOJOT_MANAGEMENT_USER: 'data-broker'
      KAFKA_GROUP_ID: 'data-broker-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

################
# iot-agent lwm2m
################
  iotagent-lwm2m:
    image: dojot/iotagent-leshan:v0.4.2
    depends_on:
      - kafka
      - data-broker
      - auth
      - image-manager
    environment:
      DOJOT_MANAGEMENT_USER: 'iotagent-lwm2m'
      KAFKA_GROUP_ID: "iotagent-lwm2m-group"
      # The FILE_SERVER_ADDRESS should be filled with an address accesible to the devices that want to update the firmware
      FILE_SERVER_ADDRESS: 127.0.0.1
    ports:
      - 5683:5683/udp # configuration coap port
      - 5684:5684/udp # configuration dtls port
      - 5693:5693/udp # file server coap port
      - 5694:5694/udp # file server dtls port
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  image-manager:
    image: dojot/image-manager:v0.4.2
    restart: always
    depends_on:
      - postgres
      - minio
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      # TODO: The following should be unique for each environment
      S3ACCESSKEY: 9HEODSF6WQN5EZ39DM7Z
      S3SECRETKEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W

  minio:
    image: dojot/minio:2019.09.20
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      # TODO: The following should be unique for each environment
      MINIO_ACCESS_KEY: 9HEODSF6WQN5EZ39DM7Z
      MINIO_SECRET_KEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
    command: server /data

  device-manager:
    image: dojot/device-manager:v0.4.2
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      - DEV_MNGR_CRYPTO_PASS="kamehameHA"
      - DEV_MNGR_CRYPTO_IV=1234567890123456
      - DEV_MNGR_CRYPTO_SALT="shuriken"
      - DBHOST="postgres"
      - DBUSER="kong"
      - DBPASS="kong"
      - LOG_LEVEL="DEBUG"
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth:
    image: dojot/auth:v0.4.2
    restart: always
    depends_on:
      - apigw
      - postgres
      - auth-redis
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "kong"
      AUTH_DB_PWD:  "kong"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used. Allowed values are "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"
      DOJOT_MANAGEMENT_USER: 'auth'
      KAFKA_GROUP_ID: 'auth-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  # postgres:
  #   image: dojot/postgres:9.4.24-alpine
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  postgres:
    image: postgres:9.5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    # deploy:
    #   restart_policy:
    #     condition: on-failure
    stdin_open: true
    tty: true

  postgres-users:
    image: postgres:9.5
    restart: on-failure
    command: >
      bash -c "if ! psql -h postgres -U postgres -t -c '\du' | cut -d \| -f 1 | grep -qw kong; then
                   echo 'creating user kong'
                   createuser kong -d -h postgres -U postgres
               else
                   echo 'user kong exists'
               fi
               if ! psql -h postgres -U postgres -lqt | cut -d \| -f 1 | grep -qw kong; then
                   echo 'creating database kong'
                   createdb kong -U kong -h postgres
               else
                   echo 'database kong exists'
               fi"
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: 100m

  # kong-migration:
  #   image: kong:2.0.3
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   # environment:
  #   #   - KONG_DATABASE=postgres
  #   #   - KONG_PG_HOST=postgres
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: "kong"
  #     KONG_PG_HOST: postgres
  #     KONG_PG_USER: "kong"
  #     KONG_PG_PASSWORD: "kong"
  #     KONG_LOG_LEVEL: info
  #   command: kong migrations bootstrap
  #   restart: on-failure

  kong-migrations:
    image:  kong:2.0.3
    command: kong migrations bootstrap
    depends_on:
      #- db
      - postgres
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: postgres
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: "kong"
      KONG_LOG_LEVEL: debug
    restart: on-failure

  apigw:
    image:  kong:test #kong:2.0.3
    user: "kong"
    depends_on:
      #- db
      - postgres
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: postgres
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: debug
      # KONG_LUA_PACKAGE_PATH: "/usr/local/custom/?.lua;;"
      # KONG_PLUGINS:  myplugin
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  # apigw:
  #   image: kong:test
  #   restart: always
  #   user: "kong"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     kong-migration:
  #       condition: service_started
  #   healthcheck:
  #     test: ["CMD", "kong", "health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   ports:
  #     - "8000:8000/tcp"
  #     - "127.0.0.1:8001:8001/tcp"
  #     - "8443:8443/tcp"
  #     - "127.0.0.1:8444:8444/tcp"
  #   environment:
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: '0.0.0.0:8001'
  #     KONG_CASSANDRA_CONTACT_POINTS: db
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  #     KONG_PG_HOST: db
  #     KONG_PG_USER: ${KONG_PG_USER:-kong}
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_PG_PASSWORD: "kong"
  #     KONG_LOG_LEVEL: debug
  #     # KONG_DATABASE: "postgres"
  #     # KONG_PG_HOST: "postgres"
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 100m

  kong-migrations-up:
    image:  kong:2.0.3
    command: kong migrations up && kong migrations finish
    depends_on:
      #- db
      - postgres
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-postgres}
      KONG_PG_HOST: postgres
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: "kong"
      KONG_LOG_LEVEL: info
    restart: on-failure

  kong-config:
    image: dojot/appropriate-curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong.config.sh:/opt/kong.config.sh:Z

  mongo:
    image: mongo:4.2.2-bionic
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/konga --quiet
      interval: 30s
      timeout: 5s
      retries: 5

  konga:
    image: pantsel/konga:latest
    depends_on:
      - apigw
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongo
      KONGA_SEED_USER_DATA_SOURCE_FILE: /kus.js
      NODE_ENV: production
    volumes:
      - ./kus.js:/kus.js:ro
    restart: on-failure

  flowbroker-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  flowbroker:
    image: dojot/flowbroker:v0.4.2
    restart: always
    environment:
      DEPLOY_ENGINE: "docker"
      FLOWBROKER_NETWORK: ${FLOWBROKER_NETWORK}
      DOJOT_MANAGEMENT_USER: 'flowbroker'
      KAFKA_GROUP_ID: 'flowbroker-group'
    depends_on:
      - rabbitmq
      - kafka
      - mongodb
      - auth
      - flowbroker-context-manager
      - flowbroker-redis
    networks:
      - default
      - flowbroker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:Z

  flowbroker-context-manager:
    image: dojot/flowbroker-context-manager:v0.4.2
    restart: always
    environment:
      ZOOKEEPER_HOST: zookeeper
      ZOOKEEPER_PORT: 2181
      ZEROMQ_PORT: 5556
      HOLD_LOCK_TIMEOUT: 10000
      WAIT_LOCK_TIMEOUT: 30000
    depends_on:
      - zookeeper
    networks:
      - default
      - flowbroker

  rabbitmq:
    image: dojot/rabbitmq:3.7-alpine
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  zookeeper:
    image: dojot/zookeeper:3.4
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: dojot/wurstmeister-kafka:2.12-2.1.1
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_NUM_PARTITIONS: 10
      JMX_PORT: 1099
    logging:
      driver: json-file
      options:
        max-size: 100m

  ejbca:
    image: dojot/ejbca-rest:v0.4.2
    environment:
      DOJOT_MANAGEMENT_USER: 'ejbca'
      KAFKA_GROUP_ID: 'ejbca-group'
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m


  data-manager:
    image: dojot/data-manager:v0.4.2
    restart: always
    depends_on:
      - flowbroker
      - device-manager

  backstage:
    image: dojot/backstage:v0.4.2
    restart: always
    depends_on:
      - postgres

  cron:
    image: dojot/cron:v0.4.2
    depends_on:
      - kafka
      - data-broker
      - auth
      - mongodb
    ports:
      - 5000:5000
    restart: always

networks:
  flowbroker:
    name: ${FLOWBROKER_NETWORK}

version: '2.1'
services:

  # certs:
  #   image: nginx
  #   restart: always
  #   depends_on:
  #     - apigw
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /etc/letsencrypt:/certs
  #     - ./certs/default.conf:/etc/nginx/conf.d/default.conf

  history:
    image: dojot/history:0.2.0-nightly20180206
    restart: always
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'

  persister:
    image: dojot/persister:0.2.0-nightly20180206
    restart: always
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'

  mongodb:
    image: "mongo:3.2"
    restart: always
    user: "mongodb"

  mqtt:
    image: ansi/mosquitto
    # If TLS is needed, use the image below
    #image: dojot/mqtt-manager:0.2.0-nightly20180119
    restart: always
    volumes:
      - ./mqtt/mosquitto.conf:/usr/local/src/mosquitto-1.4.13/mosquitto.conf:Z
    ports:
      - "1883:1883"   # for clear MQTT
      #- "8883:8883"  # for MQTT over TLS

  iotagent:
    image: dojot/iotagent-json:0.2.0-nightly20180206
    restart: always
    depends_on:
      - mongodb
      - mqtt
      - kafka
      - data-broker
    # volumes:
    #   - ./iotagent/config.json:/opt/iotagent-json/config.json:Z
    environment:
       MQTT_TLS: "false"

  # coap:
  #   image: "telefonicaiot/lightweightm2m-iotagent:latest"
  #   restart: always
  #   depends_on:
  #     - mongodb
  #   ports:
  #     - "127.0.0.1:4041:4041"
  #     - 5684:5684/udp

  gui:
    image: dojot/gui:0.2.0-nightly20180206
    restart: always

  # orion replacement component
  data-broker:
    image: dojot/data-broker:0.2.0-nightly20180206
    restart: always
    depends_on:
      - kafka
      - data-broker-redis

  data-broker-redis:
    image: redis
    restart: always
    networks:
      default:
        aliases:
          - dbmredis

  device-manager:
    image: dojot/device-manager:0.2.0-nightly20180206
    restart: always
    depends_on:
      - postgres
      - kafka

  auth-redis:
    image: redis
    restart: always

  auth:
    image: dojot/auth:0.2.0-nightly20180206
    restart: always
    depends_on:
      - "apigw"
      - "postgres"
      - "auth-redis"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "kong"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used. Allowed values are "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"

  postgres:
    image: "postgres:9.4"
    restart: always
    environment:
      POSTGRES_USER: "kong"
      POSTGRES_DB: "kong"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: dojot/kong:0.2.0-nightly20180206
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
    command: kong migrations up
    restart: on-failure

  apigw:
    image: dojot/kong:0.2.0-nightly20180206
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_started
    ports:
      - "8000:8000"
      - "8443:8443"
      - "127.0.0.1:8001:8001"
      # - "7946:7946"
      # - "7946:7946/udp"  # cluster
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "postgres"
    volumes:
      - ./apigw/plugins/pep-kong:/plugins/pep-kong
      - ./apigw/plugins/mutualauthentication:/plugins/mutualauthentication

  # perseo-core:
  #   image: telefonicaiot/perseo-core
  #   restart: always
  #   command: -perseo_fe_url perseo-fe:9090
  #
  # perseo-fe:
  #   image: dojot/perseo-fe:latest
  #   restart: always
  #   ports:
  #     - "127.0.0.1:9090:9090"
  #   depends_on:
  #     - perseo-core
  #     - mongodb
  #   environment:
  #     - PERSEO_MONGO_HOST=mongodb
  #     - PERSEO_CORE_URL=http://perseo-core:8080
  #     - PERSEO_ORION_URL=http://orion:1026/NGSI10/updateContext
  #
  # mashup:
  #   image: dojot/mashup:latest
  #   restart: always

  rabbitmq:
    image: rabbitmq
    restart: always

  alarm-manager:
    image: dojot/alarm-manager:0.2.0-nightly20180206
    restart: always
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - MONGO_HOST=mongodb
      - RABBIT_HOST=rabbitmq

  zookeeper:
    image: "zookeeper:3.4"
    restart: always

  kafka:
    image: "ches/kafka:0.10.1.1"
    depends_on:
      - zookeeper
    restart: always
    environment:
      ZOOKEEPER_IP: zookeeper
      KAFKA_NUM_PARTITIONS: 10

###
# Currently this is only needed if MQTT over TLS is used.
###
#
#  ejbca:
#    image: "dojot/ejbca"
#    restart: always

###
# If mutual authentication is needed, please uncomment these three components below
###
#
#  ma_redis:
#    image: "redis:3.2.8"
#    volumes:
#      - ./ma/redis.conf:/usr/local/etc/redis/redis.conf
#      - ./ma/sentinel.conf:/usr/local/etc/redis/sentinel.conf
#      - ./ma/redis_init.sh:/usr/local/etc/redis/redis_init.sh
#    command: sh -c "chmod +x /usr/local/etc/redis/redis_init.sh && /usr/local/etc/redis/redis_init.sh"

#  kerberos:
#    image: "dojot/kerberos:0.2.0-nightly20171228"
#    environment:
#      - CASSANDRA_HOSTNAME=cassandra
#      - CASSANDRA_PORT=9042
#    volumes:
#      - ./ma/node.config:/opt/jboss/wildfly/standalone/configuration/node.config
#      - ./ma/kafka.brokers:/opt/jboss/wildfly/standalone/configuration/kafka.brokers
#      - ./ma/redis.sentinels:/opt/jboss/wildfly/standalone/configuration/redis.sentinels
#    depends_on:
#      - kafka
#      - redis
#      - cassandra

#  cassandra:
#    image: "cassandra:3.10"
